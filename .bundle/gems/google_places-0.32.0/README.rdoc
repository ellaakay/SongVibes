= Google Places

This gem provides a Ruby wrapper around the Google Places API, using HTTParty. At this moment the gem does
not support OAuth authentication and will only work with an API key.


== Obtaining an API key

To be able to use this gem, you'll need a Google Places API key. To request an API key, point your browser to
https://code.google.com/apis/console and follow the instructions there. You'll find your API key on the
*API Access* tab under *Simple API Access*.


== Installing the gem

To use this gem, install it with <tt>gem install google_places</tt> or add it to your Gemfile:

  gem 'google_places'

And install it with <tt>bundle install</tt>


== Usage

=== The spot

Each of the API methods below returns a <tt>GooglePlaces::Spot</tt> or a collection of those. Each of these
objects has these attributes:

* *reference*: a token to query the Google Places API for more details about the spot
* *vicinity*: the street or neighborhood of the spot
* *lat*: the latitude of the spot
* *lng*: the longitude of the spot
* *name*: the name of the spot
* *icon*: a URL to the icon of this spot
* *types*: array of feature types describing the spot, see list of supported types[http://code.google.com/apis/maps/documentation/places/supported_types.html]
* *formatted_phone_number*: formatted phone number of the spot (eg (555)555-555)
* *formatted_address*: the full address of the spot formatted with commas
* *address_components*: the components (eg street address, city, state) of the spot's address in an array
* *rating*: the rating of this spot on Google Places
* *url*: the url of this spot on Google Places

=== Retrieving a list of spots

First register a new Client:

  @client = GooglePlaces::Client.new(API_KEY)

Then retrieve a list of spots:

  @client.spots(-33.8670522, 151.1957362)

Search by a specific type:

  @client.spots(-33.8670522, 151.1957362, :types => 'restaurant')

Search by multiple types:

  @client.spots(-33.8670522, 151.1957362, :types => ['restaurant','food'])

Search by multiple types but exclude one type:

  @client.spots(-33.8670522, 151.1957362, :types => ['restaurant','food'], :exclude => 'cafe')

Search by multiple types but exclude multiple types:

  @client.spots(-33.8670522, 151.1957362, :types => ['restaurant','food'], :exclude => ['cafe', 'establishment'])

Search by name:

  @client.spots(-33.8670522, 151.1957362, :name => 'italian')

Search by name *and* type:

  @client.spots(-33.8670522, 151.1957362, :name => 'italian', :types => 'restaurant')

Search in a radius (in meters):

  @client.spots(-33.8670522, 151.1957362, :radius => 100)

Get results in specific language:

  @client.spots(-33.8670522, 151.1957362, :language => 'en')

=== Retrieving spots based on query

  @client.spots_by_query('Pizza near Miami Florida')

Search by multiple types and exclude multiple types

  @client.spots_by_query('Pizza near Miami Florida', :types => ['restaurant', 'food'], :exclude => ['cafe', 'establishment'])

=== Retrieving a single spot

First register a new Client:

  @client = GooglePlaces::Client.new(API_KEY)

Then retrieve the spot:

  @client.spot('CmRYAAA...upoTH3g')

=== Retrieving a single photo's url

First register a new Client:

  @client = GooglePlaces::Client.new(API_KEY)

Then retrieve the spot:

  @spot = @client.spot('CmRYAAA...upoTH3g')

Then request one of the photos url with a max width:

  url = @spot.photos[0].fetch_url(800)

=== Places Autocomplete

https://developers.google.com/places/documentation/autocomplete

<em>Note:</em> Autocomplete is often used and better suited on client side (browser/javascript). The Autocomplete API is rate limited, so make sure you check the usage limits before deciding on whether to call the API server/client side.

https://developers.google.com/maps/documentation/business/articles/usage_limits

==== Example usage

Register a new Client:

  @client = GooglePlaces::Client.new(API_KEY)

Then request a prediction based on partial match:

  @client.predictions_by_input(
      'San F',
      lat: 0.0,
      lng: 0.0,
      radius: 20000000,
      types: 'geocode',
      language: I18n.locale,
  )

The response will be an array of predictions.

== Development

You're very welcome to add functionality to this gem. To do so, follow these steps:

1. Fork the project on Github
2. Clone your own fork on your development machine
3. Install the dependencies with <tt>bundle install</tt>
4. Copy <tt>spec/api_key.sample.rb</tt> to <tt>spec/api_key.rb</tt>
5. Insert your own Google Places API key in <tt>spec/api_key.rb</tt>
6. Run the specs with <tt>rspec spec</tt>
7. Hackety hack
8. ???
9. PROFIT

Feel free to send me a pull request but please make sure your changes are sufficiently covered by RSpec.


== Important Note

Concerning the <tt>reference</tt> field, the Google Places API documentation states:

  "You can store this token and use it at any time in future to refresh cached data about this Place,
  but the same token is not guaranteed to be returned for any given Place across different searches."

Please be aware that the <tt>reference</tt> field in spot details may differ from the <tt>reference</tt> used to retrieve that spot.
